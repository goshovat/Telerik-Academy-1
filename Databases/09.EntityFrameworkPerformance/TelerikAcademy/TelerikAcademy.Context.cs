//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TelerikAcademy
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TelerikAcademyEntities : DbContext
    {
        public TelerikAcademyEntities()
            : base("name=TelerikAcademyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Town> Towns { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WorkHour> WorkHours { get; set; }
        public virtual DbSet<WorkHoursLog> WorkHoursLogs { get; set; }
        public virtual DbSet<Login_User_Today> Login_User_Todays { get; set; }
        public virtual DbSet<Login_Users_Today> Login_Users_Todays { get; set; }
        public virtual DbSet<Top_10> Top_10 { get; set; }
    
        [DbFunction("TelerikAcademyEntities", "ufn_GetComposedNames")]
        public virtual IQueryable<ufn_GetComposedNames_Result> ufn_GetComposedNames(string characters)
        {
            var charactersParameter = characters != null ?
                new ObjectParameter("characters", characters) :
                new ObjectParameter("characters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_GetComposedNames_Result>("[TelerikAcademyEntities].[ufn_GetComposedNames](@characters)", charactersParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_AddAnnualInterestForOneMonth(Nullable<int> accountID, Nullable<decimal> annualInterestRate)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var annualInterestRateParameter = annualInterestRate.HasValue ?
                new ObjectParameter("annualInterestRate", annualInterestRate) :
                new ObjectParameter("annualInterestRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddAnnualInterestForOneMonth", accountIDParameter, annualInterestRateParameter);
        }
    
        public virtual int usp_DepositMoney(Nullable<int> accountID, Nullable<decimal> money)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var moneyParameter = money.HasValue ?
                new ObjectParameter("money", money) :
                new ObjectParameter("money", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DepositMoney", accountIDParameter, moneyParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPersonsWithHigherMoney_Result> usp_SelectAllPersonsWithHigherMoney(Nullable<decimal> balanceLine)
        {
            var balanceLineParameter = balanceLine.HasValue ?
                new ObjectParameter("balanceLine", balanceLine) :
                new ObjectParameter("balanceLine", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPersonsWithHigherMoney_Result>("usp_SelectAllPersonsWithHigherMoney", balanceLineParameter);
        }
    
        public virtual ObjectResult<string> usp_SelectPersonsFullName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_SelectPersonsFullName");
        }
    
        public virtual int usp_SendMoney(Nullable<int> fromAccountID, Nullable<int> toAccountID, Nullable<decimal> money)
        {
            var fromAccountIDParameter = fromAccountID.HasValue ?
                new ObjectParameter("fromAccountID", fromAccountID) :
                new ObjectParameter("fromAccountID", typeof(int));
    
            var toAccountIDParameter = toAccountID.HasValue ?
                new ObjectParameter("toAccountID", toAccountID) :
                new ObjectParameter("toAccountID", typeof(int));
    
            var moneyParameter = money.HasValue ?
                new ObjectParameter("money", money) :
                new ObjectParameter("money", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SendMoney", fromAccountIDParameter, toAccountIDParameter, moneyParameter);
        }
    
        public virtual int usp_WithdrawMoney(Nullable<int> accountID, Nullable<decimal> money)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(int));
    
            var moneyParameter = money.HasValue ?
                new ObjectParameter("money", money) :
                new ObjectParameter("money", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WithdrawMoney", accountIDParameter, moneyParameter);
        }
    }
}
